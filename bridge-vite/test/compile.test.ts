import { describe } from "mocha";
import { expect } from "chai";
import { compile, version } from "../src/compile";
import { compiler } from "../src/config";

describe("compile test", () => {
  // the tests container
  it("checking compile result", async () => {
    const result = await compile("Vault.solpp");

    const bytecode =
      "608060405234801561001057600080fd5b5060405161076038038061076083398181016040528101906100329190610079565b806000806101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550506100e1565b600081519050610073816100ca565b92915050565b60006020828403121561008b57600080fd5b600061009984828501610064565b91505092915050565b60006100ad826100b4565b9050919050565b600069ffffffffffffffffffff82169050919050565b6100d3816100a2565b81146100de57600080fd5b50565b610670806100f06000396000f3fe6080604052600436106100295760003560e01c8063040557c41461002e578063f010006514610057575b600080fd5b34801561003a57600080fd5b50610055600480360381019061005091906102de565b610073565b005b610071600480360381019061006c9190610272565b6100b3565b005b7fe94d99ea7b644f884668342e444493c18b43924c397e0520585a8a19a37e436e8383836040516100a6939291906104ba565b60405180910390a1505050565b60008054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff164669ffffffffffffffffffff1614610123576040517f4b2bae7e00000000000000000000000000000000000000000000000000000000815260040161011a906104f1565b60405180910390fd5b803414610165576040517f4b2bae7e00000000000000000000000000000000000000000000000000000000815260040161015c90610511565b60405180910390fd5b6000600154848484600254604051602001610184959493929190610420565b6040516020818303038152906040528051906020012090507fe9d9269ac9229e8279efb51c2e7445635eeec90ecbd27cc7de805b71584b877c81868686866040516101d395949392919061046c565b60405180910390a1806002819055505050505050565b6000813590506101f88161062b565b92915050565b60008135905061020d81610642565b92915050565b60008083601f84011261022557600080fd5b8235905067ffffffffffffffff81111561023e57600080fd5b60208301915083600182028301111561025657600080fd5b9250929050565b60008135905061026c81610659565b92915050565b6000806000806060858703121561028857600080fd5b6000610296878288016101e9565b945050602085013567ffffffffffffffff8111156102b357600080fd5b6102bf87828801610213565b935093505060406102d28782880161025d565b91505092959194509250565b6000806000606084860312156102f357600080fd5b6000610301868287016101fe565b9350506020610312868287016101e9565b92505060406103238682870161025d565b9150509250925092565b6103368161055e565b82525050565b61034581610570565b82525050565b61035c61035782610570565b6105b4565b82525050565b600061036e8385610531565b935061037b8385846105a5565b610384836105c8565b840190509392505050565b600061039b8385610542565b93506103a88385846105a5565b82840190509392505050565b60006103c1600f8361054d565b91506103cc826105d9565b602082019050919050565b60006103e4600d8361054d565b91506103ef82610602565b602082019050919050565b6104038161059b565b82525050565b61041a6104158261059b565b6105be565b82525050565b600061042c828861034b565b60208201915061043d82868861038f565b91506104498285610409565b602082019150610459828461034b565b6020820191508190509695505050505050565b6000608082019050610481600083018861033c565b61048e602083018761032d565b81810360408301526104a1818587610362565b90506104b060608301846103fa565b9695505050505050565b60006060820190506104cf600083018661033c565b6104dc602083018561032d565b6104e960408301846103fa565b949350505050565b6000602082019050818103600083015261050a816103b4565b9050919050565b6000602082019050818103600083015261052a816103d7565b9050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006105698261057a565b9050919050565b6000819050919050565b600074ffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b6000819050919050565b6000819050919050565b6000601f19601f8301169050919050565b7f7265717569726520746f6b656e69640000000000000000000000000000000000600082015250565b7f726571756972652076616c756500000000000000000000000000000000000000600082015250565b6106348161055e565b811461063f57600080fd5b50565b61064b81610570565b811461065657600080fd5b50565b6106628161059b565b811461066d57600080fd5b5056";
    // result.byteCodeArr
    expect(result.byteCodeArr[0]).to.equal(bytecode);
  });

  it("checking compile version", async () => {
    const result = await version();

    // 0.8.0-develop.2021.9.17+commit.a9855af1.Linux.clang
    expect(result).contains(compiler.version.replace("v", ""));
    console.log(result);
  });
});
