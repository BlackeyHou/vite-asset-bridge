pragma soliditypp >=0.4.5;
pragma experimental ABIEncoderV2;

contract Vault {
  constructor(tokenId _tid) {
    tid = _tid;
  }  
  

  event Input(uint256 index, bytes32 id, address src, bytes dest, uint256 value);

  tokenId tid;


  uint256 public inputIndex;
  bytes32 public prevInputId;

  onMessage input(
      address src,
      bytes calldata dest,
      uint256 value
  ) payable {
    require(msg.tokenid == tid, "require tokenid");
    require(msg.amount == value, "require value");
    bytes32 id = keccak256(abi.encodePacked(salt, dest, value, prevId));
    inputIndex = inputIndex + 1;
    emit Output(inputIndex, id, src, dest, value);
    prevId = id;
  }




  uint256 public outputIndex;
  bytes32 public prevOutputId;
  event To(uint256 index, bytes32 id, address dest, uint256 value);

  onMessage output(
      bytes32 id,
      address dest,
      uint256 value
  ) {
    dest.transfer(tid, value.amount);
    outputIndex = outputIndex+1;
    emit Input(outputIndex, id, dest, value);
  }


}