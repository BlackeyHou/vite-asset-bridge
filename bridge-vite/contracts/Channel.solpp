// SPDX-License-Identifier: GPL-3.0
pragma soliditypp >=0.4.5;
pragma experimental ABIEncoderV2;

contract Channel {

  constructor(tokenId _tid, address[] memory _keepers, uint8 _threshold) payable {
    tid = _tid;
    uint256 len = _keepers.length;
    require(len >= _threshold, "threshold required");
    for (uint256 i = 0; i < len; i++) {
        keepers[_keepers[i]] = true;
    }
    threshold = _threshold;
  } 

  
  mapping(address => bool) public keepers;
  tokenId public tid;


  // -----------------------------------------------------------------------------------------------

  uint256 public inputIndex;
  bytes32 public prevInputId;
  event Input(uint256 index, bytes32 id, bytes dest, uint256 value);

  onMessage input(
      bytes calldata dest,
      uint256 value
  ) payable {
    require(msg.tokenid == tid, "require tokenid");
    require(msg.amount == value, "require value");

    bytes32 id = keccak256(abi.encodePacked(inputIndex, dest, value, prevInputId));
    inputIndex = inputIndex + 1;

    emit Input(inputIndex, id, dest, value);
    prevInputId = id;
  }



  // ------------------------------------------------------------------------------------------------
  // ------------------------------------------------------------------------------------------------


  uint256 public outputIndex;
  bytes32 public prevOutputId;
  mapping(bytes32 =>bool) public blockedOutputIds;

  event Output(uint256 index, bytes32 id, address dest, uint256 value);

  onMessage output(
      bytes32 id,
      address dest,
      uint256 value
  ) {
	bytes32 nextId = keccak256(abi.encodePacked(outputIndex, dest, value, prevOutputId));
	require(nextId == id, "id verify failed");
	require(!blockedOutputIds[nextId], "block verify failed");
    approved(nextId);
    blockedOutputIds[nextId] = true;

    dest.transfer(tid, value);
    outputIndex = outputIndex+1;
	prevOutputId = nextId;
    emit Output(outputIndex, id, dest, value);
  }


  // --------------------------------------------------------------------------------------------------
  // -------------------------------------output approve-------------------------------------------------------------
  // --------------------------------------------------------------------------------------------------

  
  

  mapping(bytes32 => uint8) public approvedCnt;
  mapping(bytes32 => mapping(address => bool)) public approvedKeepers;

  uint8 public threshold;


  event Approved(bytes32 id);

  function approved(bytes32 id) internal view {
      require(approvedCnt[id]>=threshold, "revert id approved");
  }

  onMessage approveOutput(bytes32 id) {
      require(keepers[msg.sender], "only keeper can approve");
      require(approvedKeepers[id][msg.sender]==false, "only can approve once");

      approvedCnt[id] = approvedCnt[id] + uint8(1);
      approvedKeepers[id][msg.sender] = true;
      emit Approved(id);
  }
  

  // -----------------------------------------------------------------------------------------------
  // -----------------------------------------------------------------------------------------------
  // -----------------------------------------------------------------------------------------------

  event InputProved(bytes32 id, bytes32 sigR, bytes32 sigS, uint8 sigV);

  mapping(bytes32 => mapping(address => bool)) public inputProvedKeepers;

  onMessage proveInputId(
      uint8 sigV,
      bytes32 sigR,
      bytes32 sigS,
      bytes32 id
  )  {
      require(keepers[msg.sender], "only keeper can approve");
      require(inputProvedKeepers[id][msg.sender]==false, "only can approve once");

      inputProvedKeepers[id][msg.sender] = true;
      emit InputProved(id, sigR, sigS, sigV);
  }
}